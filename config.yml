### GLOBAL CONFIGURATION
################################################################################
server:
  # --- GENERIC
  port:
    http: "80"
    https: "443"
  # --- GZIP
  # Automatically enable GZip compression on all requests.
  gzip: false
  # --- TLS
  tls:
    # Automatic Certificate Management Environment
    # Provides automatic generation of SSL/TLS certificates from Let's Encrypt
    # and any other ACME-based CA.
    # Default: false (need to provide `certfile` and `keyfile`)
    auto: false
    # Email optionally specifies a contact email address.
    # This is used by CAs, such as Let's Encrypt, to notify about problems with
    # issued certificates.
    email: noreply@example.com
    # Pair or files: the certificate and the key.
    # Used by LoadX509KeyPair to read and parse a public/private key pair from a
    # pair of files. The files must contain PEM encoded data. The certificate
    # file may contain intermediate certificates following the leaf certificate
    # to form a certificate chain.
    certfile: server.pem
    keyfile: server.key
    # WARNING: INTERNAL SERVER BEHAVIOUR
    override:
      # CipherSuites is a list of supported cipher suites for TLS versions up to
      # TLS 1.2. If CipherSuites is nil, a default list of secure cipher suites
      # is used, with a preference order based on hardware performance. The
      # default cipher suites might change over Go versions. Note that TLS 1.3
      # ciphersuites are not configurable.
      ciphersuites:
      - 49196 # TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      - 49200 # TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
      - 52393 # TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
      - 52392 # TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
      - 49195 # TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
      - 49199 # TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
      # PreferServerCipherSuites controls whether the server selects the
      # client's most preferred ciphersuite, or the server's most preferred
      # ciphersuite. If true then the server's preference, as expressed in
      # the order of elements in CipherSuites, is used.
      preferserverciphersuites: true
      # MinVersion contains the minimum TLS version that is acceptable.
      # If zero, TLS 1.0 is currently taken as the minimum.
      minversion: 771 # VersionTLS12
      # MaxVersion contains the maximum TLS version that is acceptable.
      # If zero, the maximum version supported by this package is used,
      # which is currently TLS 1.3.
      maxversion: 772 # VersionTLS13
      # CurvePreferences contains the elliptic curves that will be used in
      # an ECDHE handshake, in preference order. If empty, the default will
      # be used. The client will use the first preference as the type for
      # its key share in TLS 1.3. This may change in the future.
      curvepreferences:
      - 23 # CurveP256
      - 29 # X25519
  # --- TIMEOUT
  timeout:
    # It is the maximum duration for reading the entire request, including the
    # body.
    # Because it does not let Handlers make per-request decisions on each
    # request body's acceptable deadline or upload rate, most users will prefer
    # to use `readheader`. It is valid to use them both.
    read: 5s
    # It is the amount of time allowed to read request headers. The connection's
    # read deadline is reset after reading the headers and the Handler can
    # decide what is considered too slow for the body. If it is zero, the value
    # of `read` is used. If both are zero, there is no timeout.
    readheader: 2s
    # It is the maximum duration before timing out writes of the response. It is
    # reset whenever a new request's header is read. Like `read`, it does not
    # let Handlers make decisions on a per-request basis.
    write: 5s
    # It is the maximum amount of time to wait for the next request when
    # keep-alives are enabled. If is zero, the value of `read` is used. If both
    # ara zero, there is no timeout.
    idle: 20s
    # It runs the handler with the given time limit.
    handler: 5s
  # --- FORWARDING
  forwarding:
    # Hostname to be used for requests forwarding.
    host: ~
    # Port to be used for requests forwarding.
    # Default: incoming connection.
    # Values: 80, 443.
    port: 443
    # Endpoint scheme to be used when forwarding traffic.
    # Default: incoming connection.
    # Values: http, https.
    scheme: https
    # List of IPs/Hostnames to be used as load balanced backend servers.
    # They'll be selected using a round robin algorithm.
    endpoints:
    - 127.0.0.1
    # Forces redirect from HTTP to HTTPS.
    # Default: false
    http2https: true
    # Status code to be used when redirecting HTTP to HTTPS.
    # Default: 301
    redirectstatuscode: 301

# --- CACHE
cache:
  # --- REDIS SERVER
  host: localhost
  port: "6379"
  password: ""
  db: 0
  # --- TTL
  # Fallback storage TTL when saving the cache when no header is specified.
  # It follows the order:
  #  - If the cache is shared and the s-maxage response directives present, use
  #    its value, or
  #  - If the max-age response directive is present, use its value, or
  #  - If the Expires response header field is present, use its value minus the
  #    value of the Date response header field, or
  #  - Otherwise, no explicit expiration time is present in the response.
  #    A heuristic freshness lifetime might be applicable.
  # Default: 0
  ttl: 0
  # --- ALLOWED VALUES
  # Allows caching for different response codes.
  # Default: 200, 301, 302
  allowedstatuses:
  - 200
  - 301
  - 302
  # If the client request method is listed in this directive then the response
  # will be cached. "GET" and "HEAD" methods are always added to the list,
  # though it is recommended to specify them explicitly.
  # Default: HEAD, GET
  allowedmethods:
  - HEAD
  - GET

# --- CIRCUIT BREAKER
# WARNING: INTERNAL SERVER BEHAVIOUR
circuitbreaker:
    # Will start evaluating the failures after n requests as defined by the
    # threshold.
    threshold: 0
    # It'll open the circuit after `threshold` requests which are greater or
    # equal to the failure rate defined
    # (total failures / total requests).
    failurerate: 0
    # Interval is the cyclic period of the closed state
    # for the CircuitBreaker to clear the internal Counts.
    # If Interval is 0, the CircuitBreaker doesn't clear internal Counts during
    # the closed state.
    interval: 0s
    # Timeout is the period of the open state,
    # after which the state of the CircuitBreaker becomes half-open.
    # If Timeout is 0, the timeout value of the CircuitBreaker is set to 60
    # seconds.
    timeout: 0s
    # MaxRequests is the maximum number of requests allowed to pass through
    # when the CircuitBreaker is half-open.
    # If MaxRequests is 0, the CircuitBreaker allows only 1 request.
    maxrequests: 0

### PER DOMAIN CONFIGURATION OVERRIDE
################################################################################
domains:
  example_com:
    server:
      forwarding:
        host: example.com

  example_org:
    server:
      forwarding:
        host: example.org

  www_w3_org:
    server:
      forwarding:
        host: www.w3.org
        endpoints:
        - www.w3.org

  www_fabiocicerchia_it:
    server:
      forwarding:
        host: www.fabiocicerchia.it
        endpoints:
        - www.fabiocicerchia.it

  fabiocicerchia_it:
    server:
      forwarding:
        host: fabiocicerchia.it
        endpoints:
        - fabiocicerchia.it
